{"version":3,"sources":["component/Score.js","component/Header.js","pubsub.js","component/Card.js","App.js","index.js"],"names":["Score","props","currentScore","finalScore","Header","className","pubsub","events","subscribe","eventName","callback","push","unsubscribe","i","length","splice","publish","data","forEach","Card","useState","ifClicked","setIfClicked","updateScore","dog","resetClickStatus","useEffect","onClick","tempIfClicked","App","setCurrentScore","setFinalScore","Array","keys","arrayOrder","setArrayOrder","componentArray","displayArray","Fragment","map","order","resetGame","console","log","array","j","Math","floor","random","temp","shuffleArray","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1267fc5.chunk.js","sourcesContent":["const Score = (props) => {\n    const {currentScore, finalScore} = props\n   \n    return(\n        <div>\n            <p>\n                Current Score: {currentScore}\n            </p>\n            <p>\n                High Score: {finalScore}\n            </p>\n        </div>\n    )\n}\n\nexport default Score","import React from \"react\";\nimport Score from \"./Score\";\n\nconst Header = (props) => {\n  return (\n    <header>\n      <div>\n        <h1>Memory Card Game</h1>\n        <div>Try to click all 12 cards just once!</div>\n      </div>\n      <div className=\"score-board\">\n        <Score {...props} />\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","const pubsub = (() => {\n  let events = {};\n\n  const subscribe = (eventName, callback) => {\n    events[eventName] = events[eventName] || [];\n    events[eventName].push(callback);\n  };\n\n  const unsubscribe = (eventName, callback) => {\n    if (events[eventName]) {\n      for (let i = 0; i < events[eventName].length; i++) {\n        if (events[eventName][i] === callback) {\n          events[eventName].splice(i, 1);\n          break;\n        }\n      }\n    }\n  };\n\n  const publish = (eventName, data) => {\n    if (events[eventName]) {\n      events[eventName].forEach((callback) => {\n        callback(data);\n      });\n    }\n  };\n\n  return { subscribe, unsubscribe, publish };\n})();\n\nexport default pubsub;\n","import { useEffect, useState } from \"react\";\nimport pubsub from \"../pubsub\";\n\nlet Card = (props) => {\n  let [ifClicked, setIfClicked] = useState(false);\n\n  let { updateScore, dog } = props;\n\n  function resetClickStatus() {\n    setIfClicked(false);\n  }\n\n  useEffect(() => {\n    pubsub.subscribe(\"resetGame\", resetClickStatus);\n\n    return function cleanUp() {\n      pubsub.unsubscribe(\"resetGame\", resetClickStatus);\n    };\n  });\n\n  return (\n    <div className=\"image-container\">\n      <div\n        className={`image ${dog}`}\n        onClick={() => {\n          /* have to set if clicked to true first to call it before resetClickStatus (if it happens)*/\n          let tempIfClicked = ifClicked;\n          setIfClicked(true);\n          updateScore(tempIfClicked);\n        }}\n      ></div>\n    </div>\n  );\n};\n\nexport default Card;\n","import Header from \"./component/Header\";\nimport React, { useState } from \"react\";\nimport Card from \"./component/Card\";\nimport \"./index.css\";\nimport pubsub from \"./pubsub\";\n\nfunction App() {\n  const [currentScore, setCurrentScore] = useState(0);\n  const [finalScore, setFinalScore] = useState(0);\n  const [arrayOrder, setArrayOrder] = useState([...Array(12).keys()]);\n\n  let componentArray = [\n    <Card updateScore={updateScore} dog=\"beagle\" key=\"beagle\" />,\n    <Card updateScore={updateScore} dog=\"dachshunds\" key=\"dachshunds\" />,\n    <Card\n      updateScore={updateScore}\n      dog=\"german-shepherd\"\n      key=\"german-shepherd\"\n    />,\n    <Card\n      updateScore={updateScore}\n      dog=\"golden-retriever\"\n      key=\"golden-retriever\"\n    />,\n    <Card\n      updateScore={updateScore}\n      dog=\"labrador-retriever\"\n      key=\"labrador-retriever\"\n    />,\n    <Card updateScore={updateScore} dog=\"rottweiler\" key=\"rottweiler\" />,\n    <Card\n      updateScore={updateScore}\n      dog=\"tricolor-maltese\"\n      key=\"tricolor-maltese\"\n    />,\n    <Card\n      updateScore={updateScore}\n      dog=\"yorkshire-terrier\"\n      key=\"yorkshire-terrier\"\n    />,\n    <Card updateScore={updateScore} dog=\"border-collie\" key=\"border-collie\" />,\n    <Card updateScore={updateScore} dog=\"husky\" key=\"husky\" />,\n    <Card updateScore={updateScore} dog=\"shiba-inu\" key=\"shiba-inu\" />,\n    <Card updateScore={updateScore} dog=\"pomeranian\" key=\"pomeranian\" />,\n  ];\n\n  let displayArray = (\n    <React.Fragment>\n      {arrayOrder.map((order) => {\n        return componentArray[order];\n      })}\n    </React.Fragment>\n  );\n\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * i);\n      let temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  function updateScore(ifClicked) {\n    ifClicked ? resetGame() : incrementScore();\n    setArrayOrder(shuffleArray(arrayOrder));\n  }\n\n  function incrementScore() {\n    setCurrentScore(currentScore + 1);\n    console.log(currentScore);\n  }\n\n  function resetGame() {\n    if (currentScore > finalScore) {\n      setFinalScore(currentScore);\n    }\n    resetScore();\n    pubsub.publish(\"resetGame\");\n  }\n\n  function resetScore() {\n    setCurrentScore(0);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header currentScore={currentScore} finalScore={finalScore} />\n      <div className=\"board\">{displayArray}</div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}